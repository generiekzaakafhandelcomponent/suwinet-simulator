trigger:
  - main
pr: none

variables:
  vmImage: ubuntu-latest
  containerRegistryUrl: crzgwpweu01.azurecr.io
  containerRepository: zgw/suwinet-simulator
  releaseName: suwinet-simulator
  tags: # will be set by script
  tag: # will be set by script
  System.Debug: true

stages:
- stage: Build
  displayName: Build image
  variables:
    containerRegistry: acr-crzgwpweu01
    GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
    dockerConfigCache: $(Pipeline.Workspace)/docker
    buildTimeStamp: $(date +%Y%m%d%H%M%S) # Get datetimestamp
    branchname: $[coalesce(variables['System.PullRequest.TargetBranch'], replace(variables['Build.SourceBranch'], 'refs/heads/', ''))] # Get pullrequest branch, otherwise normal branch and strip refs/heads/
    # isRelease: $[or(contains(variables['branchname'], 'release/v'), contains(variables['branchname'], 'hotfix/v'), eq(variables['branchname'], 'main'))]
    # pushDockerImage: $[and(ne(variables['Build.Reason'], 'PullRequest'), not(contains(variables['build.sourceBranch'], '/feature/')), ne(variables['build.sourceBranchName'], 'main'))] # Don't push image when pr, feature or main
    shortSha: ${BUILD_SOURCEVERSION::8} # Get first 8 characters from sha
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImage)
    steps:
    - bash: |
        # set date to get correct system datetime
        sudo timedatectl set-timezone 'Europe/Amsterdam'
        echo "buildtimestamp: $(buildTimeStamp)"
        echo "branchname: $(branchname)"
        # echo "isRelease: $(isRelease)"
        # echo "pushDockerImage: $(pushDockerImage)"
        echo "shortSha: $(shortSha)"
        # echo "valtimo version: $(valtimo_version)"
        
        echo 'Workspace: $(Pipeline.Workspace)'
        echo 'Build.SourceBranch: $(Build.SourceBranch)'
        echo 'Build.SourceBranchName: $(Build.SourceBranchName)'
        echo 'Build.SourceVersion: $(Build.SourceVersion)'
        echo 'Build.SourcesDirectory: $(Build.SourcesDirectory)'
        echo 'Build.ArtifactStagingDirectory: $(build.artifactstagingdirectory)'
        echo 'System.PullRequest.SourceBranch: $(System.PullRequest.SourceBranch)'
        echo 'System.PullRequest.TargetBranch: $(System.PullRequest.TargetBranch)'

        branchname=$(branchname)
        # ${branchname//\//-} will replace / in branch with -, ie feature/test -> feature-test
        tag=${branchname//\//-}-$(shortSha)-$(buildTimeStamp)
        if [[ $(isRelease) == 'True' ]]; then
          tags=$tag,acc-latest,latest
        else
          tags=$tag,test-latest
        fi
        echo "Tags: $tags"

        # set variables
        echo "##vso[task.setvariable variable=tags;isOutput=true]$tags"
        echo "##vso[task.setvariable variable=tag;isOutput=true]$tag"

        # replace $valtimo_version with version in build.gradle.kts for caching step
        # sed -i.bak -r "s|([\$]valtimo_version)|$(valtimo_version)|g" build.gradle.kts
        # cat build.gradle.kts
      name: Vars
      displayName: 'Vars'

    - bash: |
        wget -P $(Agent.TempDirectory) https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
        ls -al $(Agent.TempDirectory)
      displayName: 'Download openjdk 17'

    - task: JavaToolInstaller@0
      displayName: 'Install openjdk 17'
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'LocalDirectory'
        jdkFile: '$(Agent.TempDirectory)/openjdk-17.0.2_linux-x64_bin.tar.gz'
        jdkDestinationDirectory: '$(agent.toolsDirectory)/jdk17'
        cleanDestinationDirectory: false

    - task: Cache@2
      displayName: 'Configure gradle cache'
      inputs:
        key: 'gradle | "$(Agent.OS)" | **/build.gradle.kts' # Swap build.gradle.kts for build.gradle when using Groovy
        restoreKeys: |
          gradle | "$(Agent.OS)"
        #   gradle
        path: $(GRADLE_USER_HOME)
        cacheHitVar: GRADLE_CACHE_RESTORED

    - task: Gradle@2
      displayName: 'Build gradle app'
      inputs:
        gradleWrapperFile: 'gradlew'
        options: '-Pprod -x test --no-daemon --build-cache'
        tasks: 'build'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '17'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    - task: Cache@2
      displayName: 'Configure docker cache'
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(dockerConfigCache)
        cacheHitVar: DOCKER_CACHE_RESTORED #Variable to set to 'true' when the cache is restored

    - bash: |
        docker load -i $(dockerConfigCache)/cache.tar
      displayName: 'Restore docker image'
      condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))

    - task: Docker@2
      displayName: 'Build docker image'
      inputs:
        containerRegistry: '${{ variables.containerRegistry }}'
        repository: '$(containerRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: $(Vars.tags)

    - task: Docker@2
      # condition: eq(variables.pushDockerImage, 'true')
      displayName: 'Push docker image'
      inputs:
        containerRegistry: '${{ variables.containerRegistry }}'
        repository: '$(containerRepository)'
        command: 'push'
        tags: '$(Vars.tags)'

    - bash: |
        mkdir -p $(dockerConfigCache)
        docker save -o $(dockerConfigCache)/cache.tar $(containerRegistryUrl)/$(containerRepository):$(Vars.tag)
      displayName: 'Save docker image'
      condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_RESTORED, 'true')))

- stage: DeployToTest
  dependsOn: Build
  displayName: Deploy image to Test
  condition: and(succeeded(), eq(variables['build.sourceBranchName'], 'main'))
  variables:
    kubernetesServiceConnection: aks-zgw-ota-weu-01-zgw-test
    namespace: zgw-test
    tags: $[ stageDependencies.Build.Build.outputs['Vars.tags'] ]
    tag: $[ stageDependencies.Build.Build.outputs['Vars.tag'] ]
  jobs:
  - deployment: Deploy_to_Test
    pool:
      vmImage: $(vmImage)
    environment: $(releaseName)-Test
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: HelmDeploy@0
            displayName: 'Add helm repo'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: '${{ variables.kubernetesServiceConnection }}'
              namespace: '$(namespace)'
              command: 'repo'
              arguments: 'add denhaag https://gemeente-denhaag.github.io/helm-charts'

          - task: HelmDeploy@0
            displayName: 'Deploy with helm'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: '${{ variables.kubernetesServiceConnection }}'
              namespace: '$(namespace)'
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'denhaag/generic'
              releaseName: '$(releaseName)'
              overrideValues: 'image.fullImage=$(containerRegistryUrl)/$(containerRepository):$(tag)'
              install: true
              waitForExecution: true
              arguments: '-f infra/values.yaml'