image:
  # registry: "registry.hub.docker.com"
  registry: "crzgwpweu01.azurecr.io"
  repository: "zgw/suwinet-simulator"
  tag: 
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent

## Specifies the application resource kind
##
appKind: Deployment

name: "suwinet-simulator"

## Controls whether the container automatically mounts the ServiceAccount's API credentials
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
automountServiceAccountToken: false

## Pod securityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

## Container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
## containerSecurityContext:
##   capabilities:
##     drop:
##     - ALL
##   readOnlyRootFilesystem: true
##   runAsNonRoot: true
##   runAsUser: 1001
##   allowPrivilegeEscalation: false
##
containerSecurityContext:
  enabled: true
  # readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false

## Application service parameters
##
service:
  ## Kubernetes service type and port number
  ##
  type: ClusterIP
  # clusterIP: None

  ## Specify the default service port and targetPort
  ## Note: port or ports must be provided to enable service!
  ##
  port: 8080
  targetPort: 8080

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

## Configure the ingress resource that allows you to access the
## app installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: true

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: sd-zgw.test.denhaag.nl

  ## Specify a tls secret which already exists. tls must be set to true
  ##
  existingTlsSecret: gzac-zgw-tls-secret

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## Ingress Path type
  ##
  pathType: Prefix

  ingressClassName: nginx

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  # ## The Path to Nginx. You may need to set this to '/*' in order to use this
  # ## with ALB ingress controllers.
  # ##
  path: /suwinet-simulator(.*)

  # ## Ingress annotations done as key:value pairs
  # ## For a full list of possible ingress annotations, please see
  # ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  # ##
  # ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  # ##
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: true

## Configure options for liveness and readiness probes
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## Note: probes are disabled by default and have no checks defined
##
livenessProbe:
  enabled: true
  tcpSocket:
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 2
  successThreshold: 1
readinessProbe:
  enabled: false
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
startupProbe:
  enabled: true
  tcpSocket:
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 20
  successThreshold: 1

# fix for readOnlyRootFilesystem /tmp/spring.log
volumes:
- name: tmpfs-1
  emptyDir: {}

volumeMounts:
  - mountPath: /tmp
    name: tmpfs-1

extraObjects:
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: '{{ include "common.names.fullname" . }}-ag'
    namespace: '{{ .Release.Namespace }}'
    annotations:
      appgw.ingress.kubernetes.io/health-probe-status-codes: "403"
      appgw.ingress.kubernetes.io/ssl-redirect: "true"
      appgw.ingress.kubernetes.io/rewrite-rule-set: zgw-rewriteset1
      meta.helm.sh/release-name: '{{ include "common.names.fullname" . }}'
      meta.helm.sh/release-namespace: '{{ .Release.Namespace }}'
    labels:
      app.kubernetes.io/instance: '{{ include "common.names.fullname" . }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "common.names.fullname" . }}'
  spec:
    ingressClassName: azure-application-gateway
    rules:
    - host: '{{ .Values.ingress.hostname }}'
      http:
        paths:
        - backend:
            service:
              name: '{{ include "common.names.fullname" . }}'
              port:
                name: app
          path: /suwinet-simulator*
          pathType: Prefix
    tls:
    - hosts:
      - '{{ .Values.ingress.hostname }}'
      secretName: '{{ .Values.ingress.existingTlsSecret }}'

envFrom:
  - secretRef:
       name: '{{ include "app.fullname" . }}'

syncAKV:
  sync-1:
    vaultname: kv-zgw-ota-weu-01
    objectname: '{{ include "app.fullname" . }}-test-suwinet-user'
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: SUWINET_USER
  sync-2:
    vaultname: kv-zgw-ota-weu-01
    objectname: '{{ include "app.fullname" . }}-test-suwinet-password'
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: SUWINET_PASSWORD